# Домашнее задание по теме "Блокировки и обработка ошибок"
"""''Цель: освоить блокировки потоков, используя объекты класса Lock и его методы."""
'''Задача "Банковские операции":
Необходимо создать класс Bank со следующими свойствами:
Атрибуты объекта:
balance - баланс банка (int)
lock - объект класса Lock для блокировки потоков.
Методы объекта:
Метод deposit:
Будет совершать 100 транзакций пополнения средств.
Пополнение - это увеличение баланса на случайное целое число от 50 до 500.
Если баланс больше или равен 500 и замок lock заблокирован - lock.locked(), то разблокировать его методом release.
После увеличения баланса должна выводится строка "Пополнение: <случайное число>. Баланс: <текущий баланс>".
Также после всех операций поставьте ожидание в 0.001 секунды, тем самым имитируя скорость выполнения пополнения.
Метод take:
Будет совершать 100 транзакций снятия.
Снятие - это уменьшение баланса на случайное целое число от 50 до 500.
В начале должно выводится сообщение "Запрос на <случайное число>".
Далее производится проверка: если случайное число меньше или равно текущему балансу, то произвести снятие, уменьшив
 balance на соответствующее число и вывести на экран "Снятие: <случайное число>. Баланс: <текущий баланс>".
Если случайное число оказалось больше баланса, то вывести строку "Запрос отклонён, недостаточно средств" и 
заблокировать поток методом acquiere.
Далее создайте объект класса Bank и создайте 2 потока для его методов deposit и take. Запустите эти потоки.

После конца работы потоков выведите строку: "Итоговый баланс: <баланс объекта Bank>".

По итогу вы получите скрипт разблокирующий поток до баланса равному 500 и больше или блокирующий, когда происходит
 попытка снятия при недостаточном балансе.

Пример результата выполнения программы:
Исходный код:

class Bank:
def __init__(self):
....
    def deposit(self):
...
    def take(self):
...

bk = Bank()

# Т.к. методы принимают self, в потоки нужно передать сам объект класса Bank
th1 = threading.Thread(target=Bank.deposit, args=(bk,))
th2 = threading.Thread(target=Bank.take, args=(bk,))

th1.start()
th2.start()
th1.join()
th2.join()

print(f'Итоговый баланс: {bk.balance}')

Вывод на консоль (может отличаться значениями, логика должна быть та же):
Пополнение: 241. Баланс: 241
Запрос на 174
Снятие: 174. Баланс: 67
Пополнение: 226. Баланс: 293
Запрос на 421
Запрос отклонён, недостаточно средств
Пополнение: 133. Баланс: 426
Запрос на 422
Снятие: 422. Баланс: 4
Пополнение: 150. Баланс: 154
Запрос на 207
Запрос отклонён, недостаточно средств
....
Запрос на 431
Снятие: 431. Баланс: 276
Запрос на 288
Запрос отклонён, недостаточно средств
Итоговый баланс: 276

Примечания:
Для генерации случайного целого числа используйте функцию randint из модуля random.
Для ожидания используйте функцию sleep из модуля time.
Особо важно соблюсти верную блокировку: в take замок закрывается, в deposit открывается.'''
###################################################################################################################
'''
    В стандартной библиотеке языка программирования Python нет возможности принудительно снять блокировку, 
установленную другим потоком. Это связано с тем, что принудительное снятие блокировки может привести к состояниям 
гонки и другим проблемам с синхронизацией.

Вместо этого рекомендуется использовать правильные методы синхронизации и проектировать код так, чтобы избежать 
ситуаций, когда блокировки могут привести к зависаниям. Вот несколько подходов, которые могут помочь:

1. **Проверка состояния**: Можно использовать таймеры или другие механизмы, чтобы проверять состояние блокировки и 
принимать решения о том, что делать дальше, если блокировка удерживается слишком долго.

2. **Увеличение таймаута**: Если вы используете блокировки с таймаутом (например, `Lock.acquire(timeout=...)`), это 
может помочь избежать бесконечного ожидания.

3. **Перепроектирование архитектуры**: Попробуйте изменить архитектуру вашего приложения так, чтобы уменьшить 
необходимость в блокировках, например, с помощью очередей или других структур данных, которые легче синхронизировать.

4. **Использование `threading.Event` или других примитивов**: Вместо использования блокировок, можно использовать 
`Event`, `Condition` или другие примитивы синхронизации, которые могут быть более подходящими для вашей задачи.

Если вы сталкиваетесь с проблемами, связанными с блокировками, возможно, лучше рассмотреть возможность рефакторинга 
вашего кода, чтобы избежать необходимости в принудительном снятии блокировок.'''
#######################################################################################################################

import threading
from time import sleep
from random import randint

class Bank:
    def __init__(self):
        """Инициализация объекта класса Bank."""
        self.balance = 0  # Баланс банка
        self.lock = threading.Lock()  # Объект Lock для управления блокировкой потоков

    def deposit(self):
        """Метод для пополнения баланса."""
        for _ in range(100):  # 100 транзакций пополнения
            amount = randint(50, 500)  # Случайное целое число от 50 до 500 для пополнения
            with self.lock:  # Захватываем блокировку для безопасной работы с балансом
                self.balance += amount
                print(f"Пополнение: {amount}. Баланс: {self.balance}")
                if self.balance >= 500 and self.lock.locked():  # Разблокируем, если баланс >= 500
                    self.lock.release()
            sleep(0.001)  # Имитируем задержку в выполнении

    def take(self):
        """Метод для снятия средств."""
        for _ in range(100):  # 100 транзакций снятия
            amount = randint(50, 500)  # Случайное число для снятия
            print(f"Запрос на {amount}")
            with self.lock:  # Захватываем блокировку
                if amount <= self.balance:
                    self.balance -= amount
                    print(f"Снятие: {amount}. Баланс: {self.balance}")
                else:
                    print("Запрос отклонён, недостаточно средств")
                    self.lock.acquire(timeout=0.1)  # Блокируем, если средств недостаточно
            #sleep(0.001)  # Имитируем задержку в выполнении

# Создание объекта класса Bank
bk = Bank()

# Создание потоков для методов deposit и take
th1 = threading.Thread(target=Bank.deposit, args=(bk,))
th2 = threading.Thread(target=Bank.take, args=(bk,))

# Запуск потоков
th1.start()
th2.start()

# Ожидание завершения потоков
th1.join()
th2.join()

# Вывод итогового баланса
print(f'Итоговый баланс: {bk.balance}')

# это чистые костыли - УЩЕРБНЫЕ УСЛОВИЯ ЗАЛАЧИ
# ЕСЛИ НЕ ПРАВ - ОЧЕНЬ ХОТЕЛОСЬ БЫ УВИДЕТЬ КОРРЕКТНОЕ РЕШЕНИЕ ДАННОЙ ЗАДАЧИ