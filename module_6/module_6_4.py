# Дополнительное практическое задание по модулю: "Наследование классов."
# Задание "Они все так похожи":
"""
2D? 3D? Даже 4D?.... Настолько глубоко мы заходить конечно же не будем, 4D подождёт, но вот с двумерными и трёхмерными
фигурами можем поэкспериментировать.
Вы когда-нибудь задумывались как устроены графические библиотеки для языков программирования?
Безусловно, там выполняются огромные расчёты при помощи вашей видеокарты, но... Что лежит в основе удобного использования
таких объектов?
По названию задачи можно понять, что все геометрические фигуры обладают схожими свойствами, такими как: длины сторон,
цвет и др.
Давайте попробуем реализовать простейшие классы для некоторых таких фигур и при этом применить наследование (в будущем,
изучая сторонние библиотеки, вы будете замечать схожие классы, уже написанные кем-то ранее):
"""
"""
Общее ТЗ:
Реализовать классы Figure(родительский), Circle, Triangle и Cube, объекты которых будут обладать методами изменения
размеров, цвета и т.д.
Многие атрибуты и методы должны быть инкапсулированны и для них должны быть написаны интерфейсы взаимодействия 
(методы) - геттеры и сеттеры."""
"""
Подробное ТЗ:
Атрибуты класса Figure: sides_count = 0
Каждый объект класса Figure должен обладать следующими атрибутами:
Атрибуты(инкапсулированные): __sides(список сторон (целые числа)), __color(список цветов в формате RGB)
Атрибуты(публичные): filled(закрашенный, bool)
И методами:
Метод get_color, возвращает список RGB цветов.
Метод __is_valid_color - служебный, принимает параметры r, g, b, который проверяет корректность переданных значений
перед установкой нового цвета. Корректным цвет: все значения r,g и b - целые числа в диапазоне от 0 до 255 (вклю-но).
Метод set_color принимает параметры r, g, b - числа и изменяет атрибут __color на соответствующие значения, 
предварительно проверив их на корректность. Если введены некорректные данные, то цвет остаётся прежним.
Метод __is_valid_sides - служебный, принимает неограниченное кол-во сторон, возвращает True если все стороны целые 
положительные числа и кол-во новых сторон совпадает с текущим, False - во всех остальных случаях.
Метод get_sides должен возвращать значение я атрибута __sides.
Метод __len__ должен возвращать периметр фигуры.
Метод set_sides(self, *new_sides) должен принимать новые стороны, если их количество не равно sides_count, 
то не изменять, в противном случае - менять."""
"""
Атрибуты класса Circle: sides_count = 1
Каждый объект класса Circle должен обладать следующими атрибутами и методами:
Все атрибуты и методы класса Figure
Атрибут __radius, рассчитать исходя из длины окружности (одной единственной стороны).
Метод get_square возвращает площадь круга (можно рассчитать как через длину, так и через радиус).

Атрибуты класса Triangle: sides_count = 3
Каждый объект класса Triangle должен обладать следующими атрибутами и методами:
Все атрибуты и методы класса Figure
Метод get_square возвращает площадь треугольника. (можно рассчитать по формуле Герона)

Атрибуты класса Cube: sides_count = 12
Каждый объект класса Cube должен обладать следующими атрибутами и методами:
Все атрибуты и методы класса Figure.
Переопределить __sides сделав список из 12 одинаковы сторон (передаётся 1 сторона)
Метод get_volume, возвращает объём куба."""
"""
ВАЖНО!
При создании объектов делайте проверку на количество переданных сторон, если сторон не ровно sides_count, то 
создать массив с единичными сторонами и в том кол-ве, которое требует фигура.
Пример 1: Circle((200, 200, 100), 10, 15, 6), т.к. сторона у круга всего 1, то его стороны будут - [1]
Пример 2: Triangle((200, 200, 100), 10, 6), т.к. сторон у треугольника 3, то его стороны будут - [1, 1, 1]
Пример 3: Cube((200, 200, 100), 9), т.к. сторон(рёбер) у куба - 12, то его стороны будут - [9, 9, 9, ....., 9] (12)
Пример 4: Cube((200, 200, 100), 9, 12), т.к. сторон(рёбер) у куба - 12, то его стороны будут - [1, 1, 1, ....., 1]
"""
"""
Код для проверки:
circle1 = Circle((200, 200, 100), 10) # (Цвет, стороны)
cube1 = Cube((222, 35, 130), 6)

# Проверка на изменение цветов:
circle1.set_color(55, 66, 77) # Изменится
print(circle1.get_color())
cube1.set_color(300, 70, 15) # Не изменится
print(cube1.get_color())

# Проверка на изменение сторон:
cube1.set_sides(5, 3, 12, 4, 5) # Не изменится
print(cube1.get_sides())
circle1.set_sides(15) # Изменится
print(circle1.get_sides())

# Проверка периметра (круга), это и есть длина:
print(len(circle1))

# Проверка объёма (куба):
print(cube1.get_volume())

Выходные данные (консоль):
[55, 66, 77]
[222, 35, 130]
[6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]
[15]
15
216

Примечания (рекомендации):
Рекомендуется сделать дополнительные (свои проверки) работы методов объектов каждого класса.
Делайте каждый класс и метод последовательно и проверяйте работу каждой части отдельно.
Для проверки принадлежности к типу рекомендуется использовать функцию isinstance.
Помните, служебные инкапсулированные методы можно и нужно использовать только внутри текущего класса.
Вам не запрещается вводить дополнительные атрибуты и методы, творите, но не переборщите!"""
#####################################################################################################

import math

class Figure:
    sides_count = 0
    __sides = [] #(список сторон (целые числа))
    __color = [0, 0, 0] #(список цветов в формате RGB, по умолчанию пусть будет черный)
    filled = True #(закрашенный, bool)

    ##############################
    #Вариант 1 - деревня, но логика прозрачна))))
    # def __init__(self, color, *sides):
    #     # Проверка количества сторон, если их меньше sides_count - заполняем единицами
    #     if len(sides) != self.sides_count:
    #         self.__sides = [1] * self.sides_count
    #     else:
    #         self.__sides = list(sides)
    #
    #     # Цвет фигуры, проверяем корректность значений при установке
    #     if self.__is_valid_color(*color):
    #         self.__color = list(color)
    #     else:
    #         self.__color = [0, 0, 0]  # Цвет по умолчанию (чёрный)
    #
    #     self.filled = True  # Фигура закрашена по умолчанию
    ##############
    # Вариант 2 - вроде получше, но, зараза, запутанно получилось
    # def __init__(self, color, *sides):
    #     self.set_sides(*sides if len(sides) == self.sides_count else [1] * self.sides_count)
    #     self.__color = list(color) if self.__is_valid_color(*color) else [0, 0, 0]
    #     self.filled = True
    ##########################
    def __init__(self, color, *sides):
        self.set_sides(*sides)  # Логика проверки перенесена внутрь set_sides
        self.__color = list(color) if self.__is_valid_color(*color) else [0, 0, 0]
        self.filled = True

    def get_color(self) -> list:
        """Возвращает текущий цвет фигуры - список RGB цветов (копию списка, для безопасности)
        color = figure.get_color()
        color[0] = 255  # Изменит `__color` в объекте!"""

        return self.__color[:]

    def __is_valid_color(self, r: int, g: int, b: int) -> bool:
        """Проверка корректности цвета (значения RGB в диапазоне 0-255) возвращает True or False"""
        return all(isinstance(val, int) and 0 <= val <= 255 for val in (r, g, b))

    def set_color(self, r: int, g: int, b: int) -> None:
        """Установка нового цвета (если корректны значения RGB)"""
        if self.__is_valid_color(r, g, b):
            self.__color = [r, g, b]

    def get_sides(self) -> list:
        """Возвращает список сторон фигуры (копию списка, для безопасности)"""
        return self.__sides[:]

    def __len__(self):
        """Возвращает периметр фигуры (сумму сторон) магический метод переопределения LEN"""
        return sum(self.__sides)

    def __is_valid_sides(self, *new_sides) -> bool:
        """Проверка на корректность сторон: целые, положительные числа, количество соответствует sides_count"""
        return len(new_sides) == self.sides_count and all(isinstance(side, int) and side > 0 for side in new_sides)

    def set_sides(self, *new_sides) -> None:
        """Установка новых сторон (при корректности значений) или заполнение 1 по количеству сторон"""
        if self.__is_valid_sides(*new_sides):
            self.__sides = list(new_sides)
        else:
            self.__sides = [1] * self.sides_count


class Triangle(Figure):
    sides_count = 3  # У треугольника три стороны

    def __init__(self, color, *sides):
        # Вызов конструктора родительского класса с передачей параметров
        super().__init__(color, *sides)  # Вызов конструктора родительского класса
        # Дополнительная проверка для треугольника
        if not self.is_valid_triangle(*sides):
            self.set_sides(1, 1, 1)  # Если невалидные стороны, ставим [1, 1, 1]

    def is_valid_triangle(self, a, b, c) -> bool:
        """Проверка существования треугольника по неравенствам треугольника"""
        return a + b > c and a + c > b and b + c > a

    def get_square(self):
        """Вычисляет площадь треугольника по формуле Герона"""
        a, b, c = self.get_sides()
        s = len(self) / 2  # Полупериметр
        return math.sqrt(s * (s - a) * (s - b) * (s - c))

class Circle(Figure):
    sides_count = 1  # У круга одна сторона (длина окружности)

    def __init__(self, color, *sides):
        super().__init__(color, *sides)
        self.__radius = self.get_sides()[0] / (2 * math.pi)  # Вычисляем радиус на основе длины окружности

    def get_square(self):
        """Возвращает площадь круга (по радиусу)"""
        return math.pi * self.__radius ** 2

class Cube(Figure):
    sides_count = 12  # У куба 12 рёбер
    # Упрощаем логику программы исходя из Пример 3: Cube((200, 200, 100), 9) и здравого смысла
    def __init__(self, color, *sides):
        #print(sides, type(sides), '=================================================')
        super().__init__(color, *((sides[0],) * 12))  # Устанавливаем все рёбра одинаковыми по первому ребру Адама

    # def set_sides(self, *new_sides) -> None:
    #     """Переопределяем ф-цию исходя из Пример 3: Cube((200, 200, 100), 9)"""
    #     if isinstance(new_sides[0], int) and new_sides[0] > 0:
    #         #print(new_sides[0], type(new_sides[0], '++++++++++++++++++++++++++++++++++'))
    #         self.__sides = list(new_sides[0] * 12) # тут еще с типом разобраться - кортеж на список
    #
    #     else:
    #         self.__sides = [1] * 12
    # НЕ АРБАЙТЕН!!! ЗАПИСЬ ДАННЫХ В ДРУГУЮ ОБЛАСТЬ ПАМЯТИ ПОЭТОМУ ОСТАЛЬНЫЕ Ф-ЦИИ НЕ МОРУТ ФУНЦИКЛИРОВАТЬ)))
    # ГЛАВНОЕ ВРУБИЛСЯ, МОЖНО ПОТОМ КУМЕКАТЬ
    def get_volume(self):
        """Возвращает объём куба"""
        edge = self.get_sides()[0]  # Все рёбра равны
        return edge ** 3

############################################################################################
print("Внимание логика кода слегка изменена и не совсем коррелируется с ТЗ, зато ближе к здравому смыслу ИМХО")
t1 = Triangle((200, 200, 200), 3, 5, 4)
print(t1.get_color())
print(t1.get_square())
print(len(t1))
print(t1.get_sides())
print('-------------------------------------------------')
#Код для проверки:
circle1 = Circle((200, 200, 100), 10) # (Цвет, стороны)
cube1 = Cube((222, 35, 130), 6, 9, 12)
print(cube1.get_sides())

# Проверка на изменение цветов:
circle1.set_color(55, 66, 77) # Изменится
print(circle1.get_color())
cube1.set_color(300, 70, 15) # Не изменится
print(cube1.get_color())

# Проверка на изменение сторон:
cube1.set_sides(5, 3, 12, 4, 5) # Не изменится
print(cube1.get_sides())
circle1.set_sides(15) # Изменится
print(circle1.get_sides())

# Проверка периметра (круга), это и есть длина:
print(len(circle1))

# Проверка объёма (куба):
print(cube1.get_volume())