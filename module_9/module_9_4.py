# Домашнее задание по теме "Создание функций на лету"
"""Цель: освоить на практике замыкание, объекты-функторы и lambda-функции."""
'''
Задача "Функциональное разнообразие":
Lambda-функция:
Даны 2 строки:

first = 'Мама мыла раму'
second = 'Рамена мало было'

Необходимо составить lambda-функцию для следующего выражения - list(map(?, first, second)).
Здесь ? - место написания lambda-функции.

Результатом должен быть список совпадения букв в той же позиции:
[False, True, True, False, False, False, False, False, True, False, False, False, False, False]
Где True - совпало, False - не совпало.

Замыкание:
Напишите функцию get_advanced_writer(file_name), принимающую название файла для записи.
Внутри этой функции, напишите ещё одну - write_everything(*data_set), где *data_set - параметр принимающий
 неограниченное количество данных любого типа.
Логика write_everything заключается в добавлении в файл file_name всех данных из data_set в том же виде.
Функция get_advanced_writer возвращает функцию write_everything.

Данный код:
write = get_advanced_writer('example.txt')
write('Это строчка', ['А', 'это', 'уже', 'число', 5, 'в', 'списке'])
Запишет данные в файл в таком виде:

Метод __call__:
Создайте класс MysticBall, объекты которого обладают атрибутом words хранящий коллекцию строк.
В этом классе также определите метод __call__ который будет случайным образом выбирать слово из words и возвращать его.
 Для случайного выбора с одинаковой вероятностью для каждого данного в коллекции можете использовать функцию choice из
  модуля random.

Ваш код (количество слов для случайного выбора может быть другое):
from random import choice
# Ваш класс здесь
first_ball = MysticBall('Да', 'Нет', 'Наверное')
print(first_ball())
print(first_ball())
print(first_ball())

Примерный результат (может отличаться из-за случайности выбора):
Да
Да
Наверное

Примечания:
Все задания пишутся в одном модуле.
Передаваемые данные в функции и объекты можете использовать свои, главное, чтобы ваш код полноценно демонстрировал 
логику написанного.'''
#####################################################################################################################

first = 'Мама мыла раму'
second = 'Рамена мало было'

result = list(map(lambda x, y: x == y, first, second))

#-----------------------------------------------------------------------------------------

def get_advanced_writer(file_name):
    """
    Функция get_advanced_writer принимает имя файла и возвращает функцию write_everything,
    которая записывает данные в указанный файл.
    """

    def write_everything(*data_set):
        """
        Функция write_everything принимает неограниченное количество аргументов,
        которые могут быть любого типа, и записывает их в файл.
        """
        # Открываем файл в режиме добавления (append)
        with open(file_name, 'a', encoding='utf-8') as file:
            for data in data_set:
                print(data) # ЭТО ДЛЯ ДЕМОНСТРАЦИИ И ОТЛАДКИ В ТЕРМИНАЛЕ!!!!
                # Преобразуем данные в строку и записываем в файл
                file.write(str(data))
                # Добавляем перевод строки после каждого элемента
                file.write('\n')

    # Возвращаем внутреннюю функцию, обеспечивая замыкание
    return write_everything

######
#Вариант для себя! С обработкой ошибок.
######
'''
def get_advanced_writer(file_name):
    """
    Функция get_advanced_writer принимает имя файла и возвращает функцию write_everything,
    которая записывает данные в указанный файл.
    """

    def write_everything(*data_set):
        """
        Функция write_everything принимает неограниченное количество аргументов, 
        которые могут быть любого типа, и записывает их в файл.
        """

        try:
            # Пытаемся открыть файл в режиме добавления (append)
            with open(file_name, 'a', encoding='utf-8') as file:
                for data in data_set:
                    try:
                        # Преобразуем данные в строку и записываем в файл
                        file.write(str(data))
                        # Добавляем перевод строки после каждого элемента
                        file.write('\n')
                    except TypeError as e:
                        # Обрабатываем ошибку, если объект нельзя привести к строке
                        print(f"Ошибка преобразования данных в строку: {e}")
        except IOError as e:
            # Обрабатываем ошибку ввода/вывода, например, если файл недоступен
            print(f"Ошибка доступа к файлу: {e}")
        except Exception as e:
            # Обрабатываем любые другие неожиданные ошибки
            print(f"Произошла непредвиденная ошибка: {e}")

    # Возвращаем внутреннюю функцию, обеспечивая замыкание
    return write_everything
'''
#--------------------------------------------------------------------------------

from random import choice

class MysticBall:
    def __init__(self, *args):
        """
        Конструктор класса MysticBall.
        :param args: Переменное количество аргументов, представляющих коллекцию строк.
        """
        # Сохраняем переданные строки в атрибут words
        self.words = args
        print('init: ', self.words) # Для отладки!!!!
        print('init: ', type(self.words)) # Для отладки!!!!

    def __call__(self):
        """
        Метод, который позволяет объекту класса MysticBall быть вызываемым.
        Возвращает случайное слово из коллекции words.
        :return: Случайно выбранное слово из атрибута words.
        """

        print('call: ', self.words)  # Для отладки!!!!
        print('call: ', type(self.words))  # Для отладки!!!!

        # Возвращаем случайно выбранное слово из коллекции words
        return choice(self.words)


if __name__ == "__main__":
    print('====================================================')
    print(f'вывод применения лямбды: {result} \n ==================================================')

    # Запись в файл example.txt!!!!!!!!!!!!!!!!!!!!!!!!
    print('Это будет записано/добавлено в файле example.txt, смотри проводник :-)')
    write = get_advanced_writer('example.txt')
    write('Это строчка', ['А', 'это', 'уже', 'число', 5, 'в', 'списке'])

    print('====================================================')
    # Создаем объект MysticBall с тремя возможными ответами
    first_ball = MysticBall('Да', 'Нет', 'Наверное', [1, 2, 3])

    # Вызываем объект как функцию и выводим результат (случайный ;-) )
    print(first_ball())
    print(first_ball())
    print(first_ball())
