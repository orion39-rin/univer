#Домашнее задание по теме "Декораторы"
"""Цель задания: Освоить механизмы создания декораторов Python. Практически применить знания, создав функцию
декоратор и обернув ею другую функцию."""
'''
Задание:
Напишите 2 функции:
Функция, которая складывает 3 числа (sum_three)
Функция декоратор (is_prime), которая распечатывает "Простое", если результат 1ой функции будет простым числом
 и "Составное" в противном случае.

Пример:
result = sum_three(2, 3, 6)
print(result)

Результат консоли:
Простое
11

Примечания:
Не забудьте написать внутреннюю функцию wrapper в is_prime
Функция is_prime должна возвращать wrapper
@is_prime - декоратор для функции sum_three'''
####################################################################################################################

def is_prime(func):
    """
    Декоратор, проверяющий, является ли результат выполнения декорируемой функции простым числом.
    Для чисел до миллиона чаще всего используется метод перебора делителей от 2 до корня из числа
    Если найден делитель, то число составное.
    """
    def wrapper(*args, **kwargs):
        result = func(*args, **kwargs)  # Вызываем декорируемую функцию

        # Проверяем, является ли результат натуральным числом
        if result < 1:
            print("Не натуральное число")  # Числа меньше 1 не натуральные
        elif result == 1:
            print("Единица (не простое и не составное)")  # Особый случай для 1
        else:
            # Проверка на простоту
            for i in range(2, int(result ** 0.5) + 1):  # Проверяем делители от 2 до sqrt(result)
                if result % i == 0:  # Найден делитель
                    print("Составное")
                    break
            else:
                print("Простое")  # Если делителей нет, число простое

        return result

    return wrapper

@is_prime
def sum_three(*args):
    """
    Функция, складывающая три числа.
    """
    a1, a2, a3 = args
    result = a1 + a2 + a3
    return result

# Тестирование функциональности
if __name__ == "__main__":
    result = sum_three(2, 3, 6)
    print(result)  # Ожидается: "Составное" и 11

    result = sum_three(2, 2, 1)
    print(result)  # Ожидается: "Простое" и 5

    result = sum_three(4, 6, 8)
    print(result)  # Ожидается: "Составное" и 18



